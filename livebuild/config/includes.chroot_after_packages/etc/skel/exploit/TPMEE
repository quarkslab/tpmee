#! /bin/bash


##########################################################################
# Hardware copy
##########################################################################
function get_dmi()
{
  ret=""
  base_dmi="/sys/devices/virtual/dmi/id/"
  type="$1"
  name="$2"
  path="$3"
  val=$(cat $base_dmi/$path 2>/dev/null)
  if [[ -n $val ]]; then
    ret="type=${type},${name}=${val}"
  fi
  echo $ret
}

list_smbios=( "0,vendor,bios_vendor"
              "0,date,bios_date"
	      "0,version,bios_version"
	      "1,manufacturer,sys_vendor"
	      "1,product,product_name"
	      "1,version,product_version"
	      "1,serial,product_serial"
	      "1,uuid,product_uuid"
	      "1,family,product_family"
	      "1,sku,product_sku"
	      "2,manufacturer,board_vendor"
	      "2,product,board_name"
	      "2,version,board_version"
	      "2,serial,board_serial"
	      "2,asset,asset_tag"
	      "3,manufacturer,chassis_vendor"
	      "3,version,chassis_version"
	      "3,serial,chassis_serial"
	      "3,asset,chassis_asset_tag"
      	    )

for i in ${list_smbios[@]}
do
  smbios=(${i//,/ })
  ret=$(get_dmi "${smbios[0]}" "${smbios[1]}" "${smbios[2]}")
  if [[ -n $ret ]]; then
    smbios_result+=" -smbios \"$ret\""
  fi
done

#for i in $(lsusb | cut -d ' ' -f 6)
#do
#    usb=(${i//:/ })
#    usb_result+=" -device usb-host,vendorid=0x${usb[0]},productid=0x${usb[1]}"
#done



##########################################################################
# Hardware copy
##########################################################################

function set_uefi()
{
  mkdir -p "$base/ovmf/"
  cp /usr/share/ovmf/OVMF.fd "$base/ovmf/OVMF.fd"
  UEFI_OPTIONS="-drive if=pflash,format=raw,file=$base/ovmf/OVMF.fd"
  echo $UEFI_OPTIONS
}

if [ $# -lt 2 ]
  then
    echo "usage $0: $0 <disk_path> <tpm_path> [specific_options] [-u]"
    echo "-u to enable uefi"
    echo "example for windows:"
    echo "$0 /dev/sdb /dev/tpm0 '-smp cores=2,threads=2,sockets=1'"
    exit 1
fi

base="/home/user/exploit"
disk="$1"
tpm_path="$2"
shift 2
options=""
if [[ ! "$1" =~ ^-.* ]];
then
  echo $1
  options="$1"
  shift 1
fi
UEFI_OPTIONS=""
DEBUG=""


while getopts ":ug:" option; do
    case "${option}" in
        u)
          UEFI_OPTIONS=$(set_uefi)
            ;;
	g)
	  DEBUG="-s -S"
	    ;;
    esac
done

touch /tmp/cancel


#$base/qemu-system -drive file=$disk,index=0,media=disk,format=raw $UEFI_OPTIONS -cpu host $smbios_result -usb $usb_result -enable-kvm -machine accel=kvm -m 4G $options -boot menu=on -tpmdev passthrough,path=$tpm_path,id=tpm0,cancel-path=/tmp/cancel -device tpm-tis,tpmdev=tpm0 -L qemu/build/pc-bios/ -tpm_sniff /tmp/sniffer_socket
eval qemu-system-$(uname -m) $DEBUG -drive file=$disk,index=0,media=disk,format=raw $UEFI_OPTIONS -cpu host $smbios_result -usb $usb_result -enable-kvm -machine accel=kvm -m 4G $options -boot menu=on -tpmdev passthrough,path=$tpm_path,id=tpm0,cancel-path=/tmp/cancel -device tpm-tis,tpmdev=tpm0 -tpm_sniff /tmp/sniffer_socket

